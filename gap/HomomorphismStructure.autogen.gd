# SPDX-License-Identifier: GPL-2.0-or-later
# CategoryConstructor: Construct categories out of given ones
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecord.gi

#! @Chapter Futher CAP operations

#! @Section Add-methods

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InterpretAsMorphismInRangeCategoryOfHomomorphismStructure`.
#! $F: ( phi ) \mapsto \mathtt{InterpretAsMorphismInRangeCategoryOfHomomorphismStructure}(phi)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddInterpretAsMorphismInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddInterpretAsMorphismInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddInterpretAsMorphismInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddInterpretAsMorphismInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InterpretAsObjectInRangeCategoryOfHomomorphismStructure`.
#! $F: ( arg2 ) \mapsto \mathtt{InterpretAsObjectInRangeCategoryOfHomomorphismStructure}(arg2)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddInterpretAsObjectInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddInterpretAsObjectInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddInterpretAsObjectInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddInterpretAsObjectInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InterpretMorphismFromRangeCategoryOfHomomorphismStructure`.
#! $F: ( alpha ) \mapsto \mathtt{InterpretMorphismFromRangeCategoryOfHomomorphismStructure}(alpha)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddInterpretMorphismFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddInterpretMorphismFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddInterpretMorphismFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddInterpretMorphismFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InterpretObjectFromRangeCategoryOfHomomorphismStructure`.
#! $F: ( arg2 ) \mapsto \mathtt{InterpretObjectFromRangeCategoryOfHomomorphismStructure}(arg2)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddInterpretObjectFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddInterpretObjectFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddInterpretObjectFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddInterpretObjectFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnit`.
#! $F: ( iota ) \mapsto \mathtt{LiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnit}(iota)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenRange`.
#! $F: ( iota, h ) \mapsto \mathtt{LiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenRange}(iota, h)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenRange",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenRange",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenRange",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenRange",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismUniquelyLiftingMorphismsFromTensorUnit`.
#! $F: ( a ) \mapsto \mathtt{MorphismUniquelyLiftingMorphismsFromTensorUnit}(a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenSource`.
#! $F: ( a, h ) \mapsto \mathtt{MorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenSource}(a, h)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenSource",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenSource",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenSource",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenSource",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ObjectUniquelyLiftingMorphismsFromTensorUnit`.
#! $F: ( arg2 ) \mapsto \mathtt{ObjectUniquelyLiftingMorphismsFromTensorUnit}(arg2)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddObjectUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddObjectUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddObjectUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddObjectUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsList ] );
